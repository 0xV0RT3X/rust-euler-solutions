use std::collections::HashSet;
use std::time::Instant;
use num::BigUint;

/// Calculates the number of distinct terms that can be generated by raising each base number
/// to each exponent number within the given ranges.
/// Returns the count of distinct terms.
fn distinct_terms() -> usize {
    let mut terms: HashSet<BigUint> = HashSet::new();

    for b in 2_u32..=100 {
        for e in 2_u32..=100 {
            terms.insert(BigUint::from(b).pow(e));
        }
    }

    terms.len()
}



fn main() {
    let start = Instant::now();

    // Calculate the number of distinct terms
    let solution = distinct_terms();
    println!("Solution: {}", solution);

    let end = Instant::now();
    println!("Elapsed time: {:?}", end - start);
}
